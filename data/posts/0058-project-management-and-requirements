!! title: The Right Tool for the Job - Project Management
!! slug: project-management-and-requirements
!! published: 2024-09-16
!! description: Discussing Agile and Traditional project management in different contexts and the key to choose between them: how well requirements are defined.

---

This week I discovered what I was missing to link traditional project management and agile project
management: it all comes down to requirements. 

It seems like the software world is full of holy wars: tabs vs spaces, emacs vs vim, agile vs
waterfall, this language over that language. Like all holy wars, both side are correct because they
are coming from different perspectives trying to solve different problems.

Since being introduced to project management methodologies in my senior year of university, most of
my experience has been to learn worship and champion agile and to shame and disgrace waterfall.
Backlogs and sprints are the swords and shields, and Gantt charts are the enemy. When asked for
roadmaps and timelines by senior management, my mental answer was "that's not how software or IT
operations work". But this is where it would end. I couldn't expand on the "why" behind it not
working this way; which requires extreme amounts of trust in a new manager to know that they are
making the right decisions for the organization.

A few months ago, I was introduced to a project that brought a paradigm shift: Huntington Ingalls
Industries. HII won the contract to build out all ten Nimitz-class aircraft carriers (Sterman,
2009). Each ship takes thousands of engineers and laborers to build over multiple years costing
billions of dollars each. A project like this is not something that can be delivered incrementally
with iteration on the final solution.

Similarly, the emergency cleanup project at the Hanford nuclear plant was also a project that had no
room for trial-and-error solutions (Shur 2017). Swift and decisive action needed to be taken to
contain the leak.

Agile project management does not seem to fit these types of projects, where traditional project
management seems to excel. But what makes the majority of modern software projects different than
building an aircraft carrier and cleaning up nuclear waste leaks? 

Both of the above projects have specific and stringent requirements. These requirements in a
physical world bring high costs for changes once the execution phase of the project starts. If part
way through the fabrication of the hull of an aircraft carrier, the US Navy came to HII and asked
for it to be five meters wider to allow for a new technology to be installed, there would be serious
impact to the other legs of the triple constraint: cost and schedule. Intuitively, anyone looking at
a finished hull would know that serious rework would be required to change the shape in any way.

With ones and zeros, it is a lot harder to visualize the amount of work it would take to implement a
change. There are often different mental models of what the aggregate system looks like which
complicates this further. A non-technical senior manager may have a relatively simplistic mental
model of the system and not understand that a new login flow may require touching every part of the
sub-system parts to create. On the other hand, an extremely technical cryptographer may have a
really good idea on how encryption keys are exchanged through the encryption systems, but they may
not have a complex mental model of the underlying cloud infrastructure that all of the software runs
on. These systems are not easily visualized in concrete ways. This challenge is exacerbated with
what seems to be the ever-changing system.

The Agile Manifesto was penned because the lack of hard requirements throughout an entire project
(Beck et al, 2001). The clarity of defined requirements is the key difference for why one project
management tool would be more useful than another.

The Agile project management methodology is useful for when requirements are not well-defined, or
have a high chance of being redefined before the project has been closed (Schwalbe 2016); keeping in
mind that the definition of a project includes a specific start and end. A more traditional project
management methodology is useful when the requirements are really well-defined and not subject to a
lot of change (Schwable 2016). 

Traditional project management has a lot of useful tools at managing programs and portfolios of
projects. Even in the software industry, using Gantt charts to visualize the high-level rough
roadmap across multiple projects is really helpful. However, communication is needed with the
management team to bridge the traditional project management methodologies and the newer Agile ones.
Transparency and coaching is needed when talking with engineers, explaining that both methodologies
are important: Agile project management at the team level and a bit more traditional program and
portfolio management at the organizational level.

It is the responsibility of the senior leaders to provide this connection between the methodologies
and to manage the differences. If teams are running Agile project management, scope is less defined
at the beginning of the project, so cost and schedule are going to be a lot more rough which means
that the initially presented roadmap is in pencil on paper rather than in stone.

It is unfortunate that there is such an aversion to "waterfall" in the software industry and that it
has become "agile or death". There are projects where a more traditional project management
methodology would work better than an Agile one. Like all good engineers, we should use the best
tool for the job rather than change the job to work with the tool. But above all, communication is
always the correct meta-tool. Ask questions, listen, hold as many roadmap meetings as needed to
drive alignment between projects and business strategy, and remember to have grace for your fellow
humans. Navigating different mental models is becoming a lot more rare as time marches forward.


---

## Resources

1. Sterman, John D. Business Dynamics: Systems Thinking and Modeling for a Complex World. Nachdr., Irwin/McGraw-Hill, 2009.
2. Schur, Matt. “U. S. Project Team Races Against Time To Contain A Radioactive Leak.” Project Management Institute, Nov. 2017, https://www.pmi.org/learning/library/us-project-team-contain-radioactive-leak-10978.
3. Beck, Kent, et al. Manifesto for Agile Software Development. 2001, https://agilemanifesto.org/.
4. Schwalbe, Kathy. Introduction to Project Management: With a Brief Guide to Microsoft Project Professional 2016. Sixth edition, Schwalbe Publishing, 2017.


